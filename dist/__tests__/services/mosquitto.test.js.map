{"version":3,"sources":["../../../src/__tests__/services/mosquitto.test.js"],"names":["jest","mock","setTimeout","respEventHandler","MQTT","connect","toHaveBeenCalledTimes","toHaveProperty","device","asyncDevice","clearAllMocks","emit","Error","sleep","ms","Promise","resolve","logger","error","toHaveBeenCalled"],"mappings":";;AAIA;;AACA;;AACA;;AACA;;;;AAPA;AACA;AAEA;AAMAA,cAAKC,IAAL,CAAU,MAAV;;AACAD,cAAKC,IAAL,CAAU,YAAV;;AACAD,cAAKC,IAAL,CAAU,SAAV;;AACAD,cAAKE,UAAL,CAAgB,IAAhB;;AAEA,uBAAS,wCAAT,EAAmD,MAAM;AACvD,mBAAG,iDAAH,EAAsD,YAAY;AAChE,UAAMC,gBAAgB,GAAG,MAAM,8BAAc,UAAd,CAA/B,CADgE,CAEhE;AACA;AACA;;AACA,yBAAOC,cAAKC,OAAZ,EAAqBC,qBAArB,CAA2C,CAA3C;AACA,yBAAOH,gBAAP,EAAyBI,cAAzB,CAAwC,QAAxC;AACA,yBAAOJ,gBAAP,EAAyBI,cAAzB,CAAwC,aAAxC;AACA,yBAAOJ,gBAAgB,CAACK,MAAxB,EAAgCD,cAAhC,CAA+C,SAA/C;AACA,yBAAOJ,gBAAgB,CAACK,MAAxB,EAAgCD,cAAhC,CAA+C,WAA/C;AACA,yBAAOJ,gBAAgB,CAACM,WAAxB,EAAqCF,cAArC,CAAoD,SAApD;AACA,yBAAOJ,gBAAgB,CAACM,WAAxB,EAAqCF,cAArC,CAAoD,WAApD;AACD,GAZD;AAcA,mBAAG,8CAAH,EAAmD,YAAY;AAC7DP,kBAAKU,aAAL;;AACA,UAAMP,gBAAgB,GAAG,MAAM,8BAAc,UAAd,CAA/B;AACAD,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,gBAAgB,CAACM,WAAjB,CAA6BE,IAA7B,CACE,OADF,EAEE,IAAIC,KAAJ,CAAU,oCAAV,CAFF;AAID,KALS,EAKP,GALO,CAAV;;AAOA,UAAMC,KAAK,GAAIC,EAAD,IAAQ;AACpB,aAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9Bd,QAAAA,UAAU,CAACc,OAAD,EAAUF,EAAV,CAAV;AACD,OAFM,CAAP;AAGD,KAJD;;AAKA,UAAMD,KAAK,CAAC,GAAD,CAAX;AACA,yBAAOI,uBAAOC,KAAd,EAAqBC,gBAArB;AACD,GAjBD;AAkBD,CAjCD","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n//  SPDX-License-Identifier: MIT-0\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { jest, describe, expect, it } from \"@jest/globals\";\nimport MQTT from \"mqtt\";\nimport { getMQTTClient } from \"../../services/mosquitto\";\nimport logger from \"../../utils/winstonLogger\";\n\njest.mock(\"mqtt\");\njest.mock(\"async-mqtt\");\njest.mock(\"winston\");\njest.setTimeout(6000);\n\ndescribe(\"Unit testing for the mosquitto service\", () => {\n  it(\"Should get the MQTT Client with it's properties\", async () => {\n    const respEventHandler = await getMQTTClient(\"WHATEVER\");\n    // setTimeout(() => {\n    //   self.emit(\"connect\");\n    // }, 300);\n    expect(MQTT.connect).toHaveBeenCalledTimes(1);\n    expect(respEventHandler).toHaveProperty(\"device\");\n    expect(respEventHandler).toHaveProperty(\"asyncDevice\");\n    expect(respEventHandler.device).toHaveProperty(\"publish\");\n    expect(respEventHandler.device).toHaveProperty(\"subscribe\");\n    expect(respEventHandler.asyncDevice).toHaveProperty(\"publish\");\n    expect(respEventHandler.asyncDevice).toHaveProperty(\"subscribe\");\n  });\n\n  it(\"Should log an error if an error event occurs\", async () => {\n    jest.clearAllMocks();\n    const respEventHandler = await getMQTTClient(\"WHATEVER\");\n    setTimeout(() => {\n      respEventHandler.asyncDevice.emit(\n        \"error\",\n        new Error(\"Error connecting to mosquitto test\")\n      );\n    }, 300);\n\n    const sleep = (ms) => {\n      return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n      });\n    };\n    await sleep(500);\n    expect(logger.error).toHaveBeenCalled();\n  });\n});\n"],"file":"mosquitto.test.js"}