{"version":3,"sources":["../../../src/__tests__/services/iotv2.test.js"],"names":["jest","mock","setTimeout","mockClientId","mockTopic","mockMessage","response","io","ClientBootstrap","toHaveBeenCalled","enable_logging","mqtt","MqttClient","mqttClientParameters","calls","toBeInstanceOf","toBeDefined","not","toBeNull","firstCallResponse","getFilePath","fname","filePath","path","resolve","toThrow","http","HttpProxyOptions","toHaveBeenCalledTimes","httpProxyOptions","toEqual","expect","arrayContaining","proxyConnectionOptions","host_name","parseInt","port","iotConfigBuilder","iot","AwsIotMqttConnectionConfigBuilder","new_mtls_builder_from_path","mtlsPaths","mqttBrokerInfo","certFile","keyFile","certificateAuthority","with_certificate_authority_from_path","caFile","clientId","with_client_id","endpoint","with_endpoint","with_port","pingTimeout","with_ping_timeout_ms","keepAliveSeconds","with_keep_alive_seconds","cleanSession","with_clean_session","proxying","with_http_proxy_options","proxyArguments","brokerAddress","toBe","build","objectContaining","any","Number","mockedMqttClient","console","log","new_connection","mqttConfig","on","clearAllMocks","undefined","Object","defineProperty","envVars","value","mockConnection","publish","logger","error","mockCallback","fn","resolves","toBeUndefined","Error","mockReturnValue"],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n//  SPDX-License-Identifier: MIT-0\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  jest,\n  describe,\n  expect,\n  it,\n  beforeAll,\n  beforeEach,\n} from \"@jest/globals\";\nimport { mqtt, http, io, iot } from \"aws-iot-device-sdk-v2\";\n// import * as iotv2 from \"./iotv2\";\nimport path from \"path\";\nimport {\n  getClient,\n  createConnectionConfigs,\n  publish,\n  setIotConnection,\n  createSubscribeOnConnectAndResume,\n} from \"../../services/iotv2\";\nimport * as envVars from \"../../env\";\nimport { mqttBrokerInfo, proxyConnectionOptions } from \"../../env\";\nimport logger from \"../../utils/winstonLogger\";\n\njest.mock(\"winston\");\njest.mock(\"aws-iot-device-sdk-v2\");\njest.setTimeout(30000);\n\nconst mockClientId = \"testClientId\";\nconst mockTopic = \"test/unit/topic\";\nconst mockMessage = \"Unit Testing this module\";\n\ndescribe(\"Unit Testing for iotv2 service.\", () => {\n  it(\"Should get MQTT Client from the client bootstrap\", async () => {\n    const response = await getClient();\n    expect(io.ClientBootstrap).toHaveBeenCalled();\n    expect(io.enable_logging).toHaveBeenCalled();\n    expect(mqtt.MqttClient).toHaveBeenCalled();\n    const mqttClientParameters = mqtt.MqttClient.mock.calls[0][0];\n    expect(mqttClientParameters).toBeInstanceOf(io.ClientBootstrap);\n    expect(response).toBeDefined();\n    expect(response).not.toBeNull();\n  });\n\n  describe(\"Unit Testing configuration setup\", () => {\n    let firstCallResponse;\n\n    describe(\"Test Setup without Proxy\", () => {\n      it(\"Should create configurations for the IoT Connection with correct parameters\", () => {\n        let response;\n        const getFilePath = (fname) => {\n          // console.log(`${dirname}/../../${fname}`);\n          const filePath = path.resolve(\"certs/\", fname);\n          return filePath;\n        };\n        expect(() => {\n          response = createConnectionConfigs(mockClientId);\n        }).not.toThrow();\n\n        expect(http.HttpProxyOptions).toHaveBeenCalledTimes(1);\n        const httpProxyOptions = http.HttpProxyOptions.mock.calls[0];\n        expect(httpProxyOptions).toEqual(\n          expect.arrayContaining([\n            proxyConnectionOptions.host_name,\n            parseInt(proxyConnectionOptions.port, 10),\n          ])\n        );\n        const iotConfigBuilder =\n          iot.AwsIotMqttConnectionConfigBuilder.new_mtls_builder_from_path();\n        const mtlsPaths =\n          iot.AwsIotMqttConnectionConfigBuilder.new_mtls_builder_from_path.mock\n            .calls[0];\n        expect(mtlsPaths).toEqual(\n          expect.arrayContaining([\n            getFilePath(mqttBrokerInfo.certFile),\n            getFilePath(mqttBrokerInfo.keyFile),\n          ])\n        );\n        const certificateAuthority =\n          iotConfigBuilder.with_certificate_authority_from_path.mock\n            .calls[0][1];\n        expect(certificateAuthority).toEqual(\n          getFilePath(mqttBrokerInfo.caFile)\n        );\n\n        const clientId = iotConfigBuilder.with_client_id.mock.calls[0][0];\n        const endpoint = iotConfigBuilder.with_endpoint.mock.calls[0][0];\n        const port = iotConfigBuilder.with_port.mock.calls[0][0];\n        const pingTimeout =\n          iotConfigBuilder.with_ping_timeout_ms.mock.calls[0][0];\n        const keepAliveSeconds =\n          iotConfigBuilder.with_keep_alive_seconds.mock.calls[0][0];\n        const cleanSession =\n          iotConfigBuilder.with_clean_session.mock.calls[0][0];\n        const proxying = iotConfigBuilder.with_http_proxy_options.mock.calls[0];\n        let proxyArguments;\n        if (proxying) {\n          // eslint-disable-next-line prefer-destructuring\n          proxyArguments = proxying[0];\n        }\n\n        expect(clientId).toEqual(mockClientId);\n        expect(endpoint).toEqual(mqttBrokerInfo.brokerAddress);\n        expect(port).toBe(443);\n        expect(pingTimeout).toBe(2000);\n        expect(keepAliveSeconds).toBe(30);\n        expect(cleanSession).toBe(true);\n\n        expect(iotConfigBuilder.build).toHaveBeenCalled();\n        // correct the testing for proxying, this should be mocked to test both cases.\n        if (proxying) {\n          // eslint-disable-next-line jest/no-conditional-expect\n          expect(proxyArguments).toEqual(\n            expect.objectContaining({\n              host_name: expect.toBe(proxyConnectionOptions.host_name),\n              port: expect.any(Number),\n            })\n          );\n        }\n        const mockedMqttClient = mqtt.MqttClient;\n        expect(mockedMqttClient).toHaveBeenCalled();\n        const mqttClientParameters = mockedMqttClient.mock.calls[0][0];\n        console.log(mqttClientParameters);\n        expect(mqttClientParameters).toBeInstanceOf(io.ClientBootstrap);\n\n        // Isn't working Don't know why\n        expect(mockedMqttClient().new_connection).toHaveBeenCalled();\n        const mqttConfig = mockedMqttClient().new_connection.mock.calls[0][0];\n        expect(mqttConfig).toBe(\"Built Configurations\");\n        expect(mockedMqttClient().new_connection().on).toHaveBeenCalled();\n\n        // const eventsArray = [];\n\n        // mockedMqttClient()\n        //   .new_connection()\n        //   .on.mock.calls.forEach((eventArray) => eventsArray.push(eventArray[0]));\n\n        // const expectedEvents = [\"error\", \"disconnect\", \"interrupt\"];\n\n        // expect(eventsArray).toEqual(expect.arrayContaining(expectedEvents));\n\n        expect(response).toBeDefined();\n        expect(response).not.toBeNull();\n        firstCallResponse = response;\n      });\n\n      it(\"Should compare a second call to the first call and IoTConfigs should Match\", () => {\n        const response = createConnectionConfigs(mockClientId);\n        expect(response).toEqual(firstCallResponse);\n      });\n    });\n\n    describe(\"Test Setup with proxy\", () => {\n      beforeEach(() => {\n        jest.clearAllMocks();\n      });\n      it(\"Should set MQTT connection with proxy options\", () => {\n        setIotConnection(undefined);\n        // eslint-disable-next-line no-import-assign\n        Object.defineProperty(envVars, \"useProxy\", { value: \"true\" });\n        createConnectionConfigs(mockClientId);\n        const iotConfigBuilder =\n          iot.AwsIotMqttConnectionConfigBuilder.new_mtls_builder_from_path();\n        expect(iotConfigBuilder.with_http_proxy_options).toHaveBeenCalled();\n        console.log(iotConfigBuilder.with_http_proxy_options.mock.calls);\n        expect(\n          iotConfigBuilder.with_http_proxy_options.mock.calls[0][0]\n        ).toBeInstanceOf(http.HttpProxyOptions);\n      });\n    });\n  });\n\n  describe(\"Testing Pub functions\", () => {\n    beforeAll(() => {\n      jest.clearAllMocks();\n    });\n\n    it(\"Should try to publish against to a topic\", async () => {\n      const mockConnection = createConnectionConfigs(mockClientId);\n      await publish(mockConnection, mockTopic, mockMessage);\n      expect(mqtt.MqttClient().new_connection().publish).toHaveBeenCalledTimes(\n        1\n      );\n      expect(logger.error).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Testing subscribe to topic in the connect event\", () => {\n    it(\"should subscribe on connect and on resumes\", async () => {\n      jest.clearAllMocks();\n      const mockConnection = createConnectionConfigs(mockClientId);\n      const mockCallback = jest.fn();\n      await expect(\n        createSubscribeOnConnectAndResume(\n          mockConnection,\n          \"test/topic\",\n          mockCallback\n        )\n      ).resolves.toBeUndefined();\n      expect(mockConnection.on.mock.calls[0][0]).toBe(\"connect\");\n      expect(mockConnection.on.mock.calls[1][0]).toBe(\"resume\");\n    });\n  });\n\n  describe(\"Testing errors\", () => {\n    it(\"Should throw an error if unable to create connection\", () => {\n      setIotConnection(undefined);\n      const iotConfigBuilder =\n        iot.AwsIotMqttConnectionConfigBuilder.new_mtls_builder_from_path();\n      iotConfigBuilder.build = jest.fn(() => {\n        throw new Error(\"Error Creating config\");\n      });\n      expect(() => {\n        createConnectionConfigs(mockClientId);\n      }).toThrow();\n    });\n\n    it(\"Should reject if error or timeout\", async () => {\n      jest.clearAllMocks();\n      const iotConfigBuilder =\n        iot.AwsIotMqttConnectionConfigBuilder.new_mtls_builder_from_path();\n      iotConfigBuilder.build = jest\n        .fn()\n        .mockReturnValue(\"Built Configurations\");\n\n      mqtt.MqttClient().new_connection().publish = jest.fn(() => {\n        throw new Error(\" Error Publishing to IoT Core\");\n      });\n\n      const mockConnection = createConnectionConfigs(mockClientId);\n\n      await publish(mockConnection, mockTopic, mockMessage);\n      expect(logger.error).toHaveBeenCalled();\n    });\n  });\n});\n"],"file":"iotv2.test.js"}