{"version":3,"sources":["../../../src/__tests__/controller/listenToTopic.test.js"],"names":["jest","mock","clearAllMocks","resolves","toBeUndefined","logger","error","not","toHaveBeenCalled","mockedMqttClient","mqtt","MqttClient","new_connection","connect","on","calls","toEqual","expect","arrayContaining","undefined","mockReturnValue"],"mappings":";;AAIA;;AACA;;AACA;;AACA;;AACA;;;;AARA;AACA;AAEA;AAOAA,cAAKC,IAAL,CAAU,SAAV;;AACAD,cAAKC,IAAL,CAAU,uBAAV;;AAEA,uBAAS,kCAAT,EAA6C,MAAM;AACjD,yBAAS,8CAAT,EAAyD,MAAM;AAC7D,4BAAU,MAAM;AACdD,oBAAKE,aAAL;AACD,KAFD;AAGA,qBAAG,wDAAH,EAA6D,YAAY;AACvE,YAAM,qBACJ,wDAAoC,YAApC,CADI,EAEJC,QAFI,CAEKC,aAFL,EAAN;AAGA,2BAAOC,uBAAOC,KAAd,EAAqBC,GAArB,CAAyBC,gBAAzB;AACD,KALD;AAOA,qBAAG,wCAAH,EAA6C,MAAM;AACjD,YAAMC,gBAAgB,GAAGC,uBAAKC,UAA9B;AACA,2BAAOF,gBAAgB,GAAGG,cAAnB,GAAoCC,OAA3C,EAAoDL,gBAApD;AACD,KAHD;AAKA,qBAAG,wCAAH,EAA6C,YAAY;AACvD,YAAMC,gBAAgB,GAAGC,uBAAKC,UAA9B;AACA,2BAAOF,gBAAgB,GAAGG,cAA1B,EAA0CJ,gBAA1C;AACA,2BAAOC,gBAAgB,GAAGG,cAAnB,GAAoCE,EAApC,CAAuCb,IAAvC,CAA4Cc,KAAnD,EAA0DC,OAA1D,CACEC,gBAAOC,eAAP,CAAuB,CAACD,gBAAOC,eAAP,CAAuB,CAAC,SAAD,CAAvB,CAAD,CAAvB,CADF;AAGA,2BAAOT,gBAAgB,GAAGG,cAAnB,GAAoCE,EAApC,CAAuCb,IAAvC,CAA4Cc,KAAnD,EAA0DC,OAA1D,CACEC,gBAAOC,eAAP,CAAuB,CAACD,gBAAOC,eAAP,CAAuB,CAAC,QAAD,CAAvB,CAAD,CAAvB,CADF;AAGD,KATD;AAUD,GA1BD;AA2BA,yBAAS,qBAAT,EAAgC,MAAM;AACpC,4BAAU,MAAM;AACdlB,oBAAKE,aAAL;AACD,KAFD;AAGA,UAAMO,gBAAgB,GAAGC,uBAAKC,UAA9B;AACA,qBAAG,gEAAH,EAAqE,YAAY;AAC/E,kCAAiBQ,SAAjB;AACAV,MAAAA,gBAAgB,GAAGG,cAAnB,CAAkCQ,eAAlC,CAAkDD,SAAlD;AACA,YAAM,qBACJ,wDAAoC,YAApC,CADI,EAEJhB,QAFI,CAEKC,aAFL,EAAN;AAGA,2BAAOC,uBAAOC,KAAd,EAAqBE,gBAArB;AACD,KAPD;AAQD,GAbD;AAcD,CA1CD","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n//  SPDX-License-Identifier: MIT-0\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { jest, describe, expect, it, beforeAll } from \"@jest/globals\";\nimport { mqtt } from \"aws-iot-device-sdk-v2\";\nimport { createSubscriptionAndConnectToTopic } from \"../../controller/listenToTopic\";\nimport { setIotConnection } from \"../../services/iotv2\";\nimport logger from \"../../utils/winstonLogger\";\n\njest.mock(\"winston\");\njest.mock(\"aws-iot-device-sdk-v2\");\n\ndescribe(\"Unit Testing for Listen to Topic\", () => {\n  describe(\"Unit testing creating connection to IoT Core\", () => {\n    beforeAll(() => {\n      jest.clearAllMocks();\n    });\n    it(\"Should createSubscription configuration without errors\", async () => {\n      await expect(\n        createSubscriptionAndConnectToTopic(\"test/topic\")\n      ).resolves.toBeUndefined();\n      expect(logger.error).not.toHaveBeenCalled();\n    });\n\n    it(\"Should have called Connect to IoT Core\", () => {\n      const mockedMqttClient = mqtt.MqttClient;\n      expect(mockedMqttClient().new_connection().connect).toHaveBeenCalled();\n    });\n\n    it(\"Should have set the resume and connect\", async () => {\n      const mockedMqttClient = mqtt.MqttClient;\n      expect(mockedMqttClient().new_connection).toHaveBeenCalled();\n      expect(mockedMqttClient().new_connection().on.mock.calls).toEqual(\n        expect.arrayContaining([expect.arrayContaining([\"connect\"])])\n      );\n      expect(mockedMqttClient().new_connection().on.mock.calls).toEqual(\n        expect.arrayContaining([expect.arrayContaining([\"resume\"])])\n      );\n    });\n  });\n  describe(\"Test Error Handling\", () => {\n    beforeAll(() => {\n      jest.clearAllMocks();\n    });\n    const mockedMqttClient = mqtt.MqttClient;\n    it(\"Should log an error if IoT conneciton wasn't created correctly\", async () => {\n      setIotConnection(undefined);\n      mockedMqttClient().new_connection.mockReturnValue(undefined);\n      await expect(\n        createSubscriptionAndConnectToTopic(\"test/topic\")\n      ).resolves.toBeUndefined();\n      expect(logger.error).toHaveBeenCalled();\n    });\n  });\n});\n"],"file":"listenToTopic.test.js"}