{"version":3,"sources":["../../../src/__tests__/controller/mosquitto.test.js"],"names":["jest","mock","setTimeout","mockTopic","mockPayload","clearAllMocks","response","asyncMqtt","AsyncClient","publish","toHaveBeenCalled","toHaveBeenCalledWith","toBeDefined","not","toBeNull","toBe","setErrorOnPublish","rejects","toThrow"],"mappings":";;AAIA;;AACA;;AACA;;;;AANA;AACA;AAEA;AAKAA,cAAKC,IAAL,CAAU,MAAV;;AACAD,cAAKC,IAAL,CAAU,YAAV;;AACAD,cAAKC,IAAL,CAAU,SAAV;;AACAD,cAAKE,UAAL,CAAgB,KAAhB;;AAEA,MAAMC,SAAS,GAAG,aAAlB;AAEA,MAAMC,WAAW,GAAG,0CAApB;AAEA,uBAAS,2CAAT,EAAsD,MAAM;AAC1D,mBAAG,kCAAH,EAAuC,YAAY;AACjDJ,kBAAKK,aAAL;;AACA,UAAMC,QAAQ,GAAG,MAAM,wBAAQH,SAAR,EAAmBC,WAAnB,CAAvB;AACA,yBAAOG,mBAAUC,WAAV,GAAwBC,OAA/B,EAAwCC,gBAAxC;AACA,yBAAOH,mBAAUC,WAAV,GAAwBC,OAA/B,EAAwCE,oBAAxC,CACER,SADF,EAEEC,WAFF;AAIA,yBAAOE,QAAP,EAAiBM,WAAjB;AACA,yBAAON,QAAP,EAAiBO,GAAjB,CAAqBC,QAArB;AACA,yBAAOR,QAAP,EAAiBS,IAAjB,CAAsB,WAAtB;AACD,GAXD;AAYA,mBAAG,6DAAH,EAAkE,YAAY;AAC5ER,uBAAUS,iBAAV,CAA4B,IAA5B;;AACA,UAAM,qBAAO,wBAAQb,SAAR,EAAmBC,WAAnB,CAAP,EAAwCa,OAAxC,CAAgDC,OAAhD,EAAN;AACD,GAHD;AAID,CAjBD","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n//  SPDX-License-Identifier: MIT-0\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { jest, describe, expect, it } from \"@jest/globals\";\nimport asyncMqtt from \"async-mqtt\";\nimport { publish } from \"../../controller/mosquitto\";\n\njest.mock(\"mqtt\");\njest.mock(\"async-mqtt\");\njest.mock(\"winston\");\njest.setTimeout(10000);\n\nconst mockTopic = \"/test/topic\";\n\nconst mockPayload = \"{'insertion_id': 81, 'insertion_id': 81}\";\n\ndescribe(\"Unit testing for the mosquitto controller\", () => {\n  it(\"Should publish to the MQTT topic\", async () => {\n    jest.clearAllMocks();\n    const response = await publish(mockTopic, mockPayload);\n    expect(asyncMqtt.AsyncClient().publish).toHaveBeenCalled();\n    expect(asyncMqtt.AsyncClient().publish).toHaveBeenCalledWith(\n      mockTopic,\n      mockPayload\n    );\n    expect(response).toBeDefined();\n    expect(response).not.toBeNull();\n    expect(response).toBe(\"Published\");\n  });\n  it(\"Should not publish to the MQTT topic, rejecting the promise\", async () => {\n    asyncMqtt.setErrorOnPublish(true);\n    await expect(publish(mockTopic, mockPayload)).rejects.toThrow();\n  });\n});\n"],"file":"mosquitto.test.js"}