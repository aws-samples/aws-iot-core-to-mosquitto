{"version":3,"sources":["../../src/utils/winstonLogger.js"],"names":["options","error","level","filename","appRoot","handleExceptions","json","maxsize","maxFiles","colorize","debug","logger","winston","createLogger","transports","File","Console","format","combine","timestamp","printf","info","message","exitOnError","stream","write"],"mappings":";;;;;;;AAGA;;AAEA;;;;AALA;AACA;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,OADF;AAELC,IAAAA,QAAQ,EAAG,GAAEC,oBAAQ,4CAFhB;AAGLC,IAAAA,gBAAgB,EAAE,IAHb;AAILC,IAAAA,IAAI,EAAE,IAJD;AAKLC,IAAAA,OAAO,EAAE,OALJ;AAKa;AAClBC,IAAAA,QAAQ,EAAE,CANL;AAOLC,IAAAA,QAAQ,EAAE;AAPL,GADO;AAUdC,EAAAA,KAAK,EAAE;AACLR,IAAAA,KAAK,EAAE,OADF;AAELI,IAAAA,IAAI,EAAE,KAFD;AAGLG,IAAAA,QAAQ,EAAE;AAHL;AAVO,CAAhB,C,CAiBA;;AACA,MAAME,MAAM,GAAG,IAAIC,iBAAQC,YAAZ,CAAyB;AACtCC,EAAAA,UAAU,EAAE,CACV,IAAIF,iBAAQE,UAAR,CAAmBC,IAAvB,CAA4Bf,OAAO,CAACC,KAApC,CADU,EAEV,IAAIW,iBAAQE,UAAR,CAAmBE,OAAvB,CAA+BhB,OAAO,CAACU,KAAvC,CAFU,CAD0B;AAKtCO,EAAAA,MAAM,EAAEL,iBAAQK,MAAR,CAAeC,OAAf,CACNN,iBAAQK,MAAR,CAAeE,SAAf,CAAyB;AAAEF,IAAAA,MAAM,EAAE;AAAV,GAAzB,CADM,EAENL,iBAAQK,MAAR,CAAeG,MAAf;AACE;AACCC,EAAAA,IAAD,IAAW,GAAEA,IAAI,CAACnB,KAAM,KAAI,CAACmB,IAAI,CAACF,SAAN,CAAiB,KAAIE,IAAI,CAACC,OAAQ,EAFhE,CAFM,CAL8B;AAYtCC,EAAAA,WAAW,EAAE;AAZyB,CAAzB,CAAf;AAcA;;AACAZ,MAAM,CAACa,MAAP,GAAgB;AACdC,EAAAA,KAAK,CAACH,OAAD,EAAU;AACbX,IAAAA,MAAM,CAACU,IAAP,CAAYC,OAAZ;AACD;;AAHa,CAAhB;eAMeX,M","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n//  SPDX-License-Identifier: MIT-0\n\nimport appRoot from \"app-root-path\";\n// eslint-disable-next-line no-unused-vars\nimport winston from \"winston\";\n\n/**\n *\n * level - Level of messages to log. 0: error, 1: warn, 2: info, 3: verbose, 4: debug, 5: silly\n * filename - The file to be used to write log data to.\n * handleExceptions - Catch and log unhandled exceptions.\n * json - Records log data in JSON format.\n * maxsize - Max size of log file, in bytes, before a new file will be created.\n * maxFiles - Limit the number of files created when the size of the logfile is exceeded.\n * colorize - Colorize the output. This can be helpful when looking at console logs.\n *\n */\n\nconst options = {\n  error: {\n    level: \"error\",\n    filename: `${appRoot}/logs/aws-iot-core-to-mosquitto-errors.log`,\n    handleExceptions: true,\n    json: true,\n    maxsize: 5242880, // 5MB\n    maxFiles: 5,\n    colorize: true,\n  },\n  debug: {\n    level: \"debug\",\n    json: false,\n    colorize: false,\n  },\n};\n\n// eslint-disable-next-line new-cap\nconst logger = new winston.createLogger({\n  transports: [\n    new winston.transports.File(options.error),\n    new winston.transports.Console(options.debug),\n  ],\n  format: winston.format.combine(\n    winston.format.timestamp({ format: \"DD-MMM-YYYY HH:mm:ss\" }),\n    winston.format.printf(\n      /* istanbul ignore next */\n      (info) => `${info.level}: ${[info.timestamp]}: ${info.message}`\n    )\n  ),\n  exitOnError: false,\n});\n/* istanbul ignore next */\nlogger.stream = {\n  write(message) {\n    logger.info(message);\n  },\n};\n\nexport default logger;\n"],"file":"winstonLogger.js"}