{"version":3,"sources":["../../src/services/iotv2.js"],"names":["ioTCoreConnection","clientBootstrap","io","ClientBootstrap","logLevel","LogLevel","NONE","enable_logging","configBuilder","getFilePath","fname","filePath","path","resolve","setIotConnection","iotConnection","getMQTTClient","client","mqtt","MqttClient","createConnectionConfigs","clientId","proxyOptions","http","HttpProxyOptions","proxyConnectionOptions","host_name","parseInt","port","logger","debug","mqttBrokerInfo","brokerAddress","process","env","MQTT_PROTOCOL","PROXY_ENABLED","iot","AwsIotMqttConnectionConfigBuilder","new_with_websockets","region","credentials_provider","auth","AwsCredentialsProvider","newDefault","new_mtls_builder_from_path","certFile","keyFile","with_certificate_authority_from_path","undefined","caFile","with_client_id","with_endpoint","with_port","with_ping_timeout_ms","with_keep_alive_seconds","with_clean_session","useProxy","with_http_proxy_options","config","build","new_connection","on","error","message","includes","stack","Error","publish","connection","topic","jsonMessage","JSON","stringify","QoS","AtLeastOnce","createSubscribeOnConnectAndResume","callbackOnMessageReceive","console","log","Promise","reject","subscribe","AtMostOnce","returnCode","sessionPresent","info","getClient"],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n//  SPDX-License-Identifier: MIT-0\n\nimport { mqtt, auth, http, io, iot } from \"aws-iot-device-sdk-v2\";\nimport path from \"path\";\nimport {\n  mqttBrokerInfo,\n  proxyConnectionOptions,\n  region,\n  useProxy,\n} from \"../env\";\nimport logger from \"../utils/winstonLogger\";\n\nlet ioTCoreConnection;\nconst clientBootstrap = new io.ClientBootstrap();\nconst logLevel = io.LogLevel.NONE;\nio.enable_logging(logLevel);\n\nlet configBuilder;\nconst getFilePath = (fname) => {\n  // console.log(`${dirname}/../../${fname}`);\n  const filePath = path.resolve(\"certs/\", fname);\n  return filePath;\n};\n\n/* istanbul ignore next */\nexport function setIotConnection(iotConnection) {\n  ioTCoreConnection = iotConnection;\n  return ioTCoreConnection;\n}\n\n/**\n * Get MQTT Client\n * */\nexport async function getMQTTClient() {\n  const client = new mqtt.MqttClient(clientBootstrap);\n  return client;\n}\n\n/**\n * Uses the new aws-device-sdk0v2 to create a connection with AWS IoT Core.\n * @param clientId Client Id used to recognize the device in the cloud.\n * @returns MqttClientConnection Client to interact with AWS IoT Core.\n */\nexport function createConnectionConfigs(clientId) {\n  const proxyOptions = new http.HttpProxyOptions(\n    proxyConnectionOptions.host_name,\n    parseInt(proxyConnectionOptions.port, 10)\n  );\n\n  logger.debug(`MQTT Host: ${mqttBrokerInfo.brokerAddress}`);\n  if (ioTCoreConnection) {\n    return ioTCoreConnection;\n  }\n  try {\n    /* istanbul ignore if */\n    if (process.env.MQTT_PROTOCOL === \"wss\") {\n      if (process.env.PROXY_ENABLED === \"true\") {\n        configBuilder =\n          iot.AwsIotMqttConnectionConfigBuilder.new_with_websockets({\n            region,\n            credentials_provider:\n              auth.AwsCredentialsProvider.newDefault(clientBootstrap),\n            proxyOptions,\n          });\n      }\n    } else {\n      configBuilder =\n        iot.AwsIotMqttConnectionConfigBuilder.new_mtls_builder_from_path(\n          getFilePath(mqttBrokerInfo.certFile),\n          getFilePath(mqttBrokerInfo.keyFile)\n        );\n    }\n\n    configBuilder.with_certificate_authority_from_path(\n      undefined,\n      getFilePath(mqttBrokerInfo.caFile)\n    );\n\n    configBuilder.with_client_id(clientId);\n    configBuilder.with_endpoint(mqttBrokerInfo.brokerAddress);\n    configBuilder.with_port(443);\n    configBuilder.with_ping_timeout_ms(2000);\n    configBuilder.with_keep_alive_seconds(30);\n    configBuilder.with_clean_session(true);\n\n    if (useProxy === \"true\") {\n      configBuilder.with_http_proxy_options(proxyOptions);\n    }\n\n    const config = configBuilder.build();\n    const client = new mqtt.MqttClient(clientBootstrap);\n    ioTCoreConnection = client.new_connection(config);\n\n    ioTCoreConnection.on(\"error\", async (error) => {\n      /* istanbul ignore next */\n      if (!error.message.includes(\"AWS_ERROR_MQTT_ALREADY_CONNECTED\")) {\n        /* istanbul ignore next */\n        logger.error(`Connection Error: ${error.message}`);\n        /* istanbul ignore next */\n      } else {\n        /* istanbul ignore next */\n        logger.error(`Already Connected: ${error.message}`);\n      }\n    });\n    ioTCoreConnection.on(\"disconnect\", async () => {\n      /* istanbul ignore next */\n      logger.error(\"Disconnected from IoT Core.\");\n    });\n    ioTCoreConnection.on(\"interrupt\", async (error) => {\n      /* istanbul ignore next */\n      logger.error(\"Connection interrupted from IoT Core.\");\n      /* istanbul ignore next */\n      logger.error(`Error: ${error.stack}`);\n    });\n  } catch (error) {\n    throw new Error(\n      `Unable to create IoT Connection MQTT Client. Error : ${error.message}`\n    );\n  }\n  return ioTCoreConnection;\n}\n\n/**\n * Publishes IoT messages to the AWS IoT Core topic asynchronously\n * @param connection The client connection AWS IoT Core\n * @param topic Topic where the message should be published to\n * @param message Message to be sent to the IoT Topic\n * @returns a Promise for status of the message being published, sucessfull or not.\n */\nexport async function publish(connection, topic, message) {\n  logger.debug(`Connection: ${connection.client}`);\n  try {\n    const jsonMessage = JSON.stringify(message);\n    logger.debug(`Sending ${message} to ioTCore`);\n    await connection.publish(topic, jsonMessage, mqtt.QoS.AtLeastOnce);\n    logger.debug(`file sent to topic: ${topic}`);\n  } catch (error) {\n    logger.error(`Error publishing data to IoT Core: ${error.message}`);\n  }\n}\n\nexport async function createSubscribeOnConnectAndResume(\n  connection,\n  topic,\n  callbackOnMessageReceive\n) {\n  console.log(`Subscribing to Topic ${topic}`);\n  // eslint-disable-next-line no-async-promise-executor\n  return new Promise(async (resolve, reject) => {\n    try {\n      logger.debug(`Connection Details: ${JSON.stringify(connection)}`);\n\n      connection.on(\"connect\", async () => {\n        /* istanbul ignore next */\n        logger.debug(\"Connected, Subscribing to Topic.\");\n        /* istanbul ignore next */\n        await connection.subscribe(\n          topic,\n          mqtt.QoS.AtMostOnce,\n          callbackOnMessageReceive\n        );\n        /* istanbul ignore next */\n        logger.debug(\"Subscribed to topic without errors.\");\n      });\n\n      connection.on(\"resume\", async (returnCode, sessionPresent) => {\n        /* istanbul ignore next */\n        logger.info(\n          `Reconnected to IoT Core. Return Code: ${returnCode} and Session is present: ${sessionPresent}.` +\n            ` \\n Susbcribing to IoT topic: ${topic}`\n        );\n        /* istanbul ignore next */\n        await connection.subscribe(\n          topic,\n          mqtt.QoS.AtMostOnce,\n          callbackOnMessageReceive\n        );\n        /* istanbul ignore next */\n        logger.debug(\"Subscribed to topic without errors.\");\n      });\n      /* istanbul ignore next */\n      console.log(`Listening to messages on topic ${topic}`);\n      resolve();\n    } catch (error) {\n      /* istanbul ignore next */\n      reject(error);\n    }\n  });\n}\n\nexport const getClient = getMQTTClient;\n"],"file":"iotv2.js"}