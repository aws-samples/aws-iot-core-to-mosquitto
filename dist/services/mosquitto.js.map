{"version":3,"sources":["../../src/services/mosquitto.js"],"names":["AsyncClient","pkg","mqtt","getMQTTClient","mosquittoURI","Promise","resolve","reject","logger","info","device","MQTT","connect","asyncDevice","on","t","msg","toString","debug","err","error","message"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;;;AALA;AACA;AAMA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,kBAAxB;AAEA,IAAIC,IAAJ;AAEA;AACA;AACA;AACA;AACA;;AACO,eAAeC,aAAf,CAA6BC,YAA7B,EAA2C;AAChD,MAAIF,IAAJ,EAAU;AACR,WAAOA,IAAP;AACD;;AAED,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,2BAAOC,IAAP,CAAa,qBAAoBL,YAAa,EAA9C;;AACA,UAAMM,MAAM,GAAGC,cAAKC,OAAL,CAAaR,YAAb,CAAf;;AACA,UAAMS,WAAW,GAAG,IAAIb,WAAJ,CAAgBU,MAAhB,CAApB;AAEAG,IAAAA,WAAW,CAACC,EAAZ,CAAe,SAAf,EAA0B,CAACC,CAAD,EAAIC,GAAJ,KAAY;AACpCR,6BAAOC,IAAP,CAAa,qBAAoBM,CAAE,MAAnC;;AACAP,6BAAOC,IAAP,CAAYO,GAAG,CAACC,QAAJ,EAAZ;AACD,KAHD;AAKAJ,IAAAA,WAAW,CAACC,EAAZ,CAAe,SAAf,EAA0B,MAAM;AAC9BN,6BAAOU,KAAP,CAAa,uCAAb;;AACAhB,MAAAA,IAAI,GAAG;AACLQ,QAAAA,MADK;AAELG,QAAAA;AAFK,OAAP;AAIAP,MAAAA,OAAO,CAACJ,IAAD,CAAP;AACD,KAPD;AASAW,IAAAA,WAAW,CAACC,EAAZ,CAAe,OAAf,EAAyBK,GAAD,IAAS;AAC/BX,6BAAOY,KAAP,CAAc,8CAA6CD,GAAG,CAACE,OAAQ,EAAvE,EAD+B,CAE/B;;;AACAd,MAAAA,MAAM,CAACY,GAAD,CAAN;AACD,KAJD;AAKD,GAxBM,CAAP;AAyBD","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n//  SPDX-License-Identifier: MIT-0\n\nimport MQTT from \"mqtt\";\nimport pkg from \"async-mqtt\";\nimport logger from \"../utils/winstonLogger\";\n\nconst { AsyncClient } = pkg;\n\nlet mqtt;\n\n/**\n * Get MQTT Mosquitto Client\n * @param {object} options\n * */\n// eslint-disable-next-line import/prefer-default-export\nexport async function getMQTTClient(mosquittoURI) {\n  if (mqtt) {\n    return mqtt;\n  }\n\n  return new Promise((resolve, reject) => {\n    logger.info(`Mosquitto Broker: ${mosquittoURI}`);\n    const device = MQTT.connect(mosquittoURI);\n    const asyncDevice = new AsyncClient(device);\n\n    asyncDevice.on(\"message\", (t, msg) => {\n      logger.info(`Got a message on \"${t}\"...`);\n      logger.info(msg.toString());\n    });\n\n    asyncDevice.on(\"connect\", () => {\n      logger.debug(\"Connected to MQTT Mosquitto broker...\");\n      mqtt = {\n        device,\n        asyncDevice,\n      };\n      resolve(mqtt);\n    });\n\n    asyncDevice.on(\"error\", (err) => {\n      logger.error(`Error when connecting to Mosquitto broker: ${err.message}`);\n      // reconnectInMs(asyncDevice, 2000);\n      reject(err);\n    });\n  });\n}\n"],"file":"mosquitto.js"}