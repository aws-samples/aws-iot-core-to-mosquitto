{"version":3,"sources":["../../src/controller/listenToTopic.js"],"names":["decoder","TextDecoder","sendToDeneva","topic","payload","decodePayload","decode","replace","logger","info","payloadObject","JSON","parse","targetTopic","stringify","destinationTopic","campaignsList","campaignsSortedList","createSubscriptionAndConnectToTopic","iotConnection","mqttBrokerInfo","mqttClientId","connect","Error","error","message"],"mappings":";;;;;;;AAGA;;AACA;;AAIA;;AACA;;;;AATA;AACA;AAUA,MAAMA,OAAO,GAAG,IAAIC,WAAJ,CAAgB,MAAhB,CAAhB,C,CAEA;;AACA;;AACA,eAAeC,YAAf,CAA4BC,KAA5B,EAAmCC,OAAnC,EAA4C;AAC1C,QAAMC,aAAa,GAAGL,OAAO,CAACM,MAAR,CAAeF,OAAf,EAAwBG,OAAxB,CAAgC,WAAhC,EAA6C,EAA7C,CAAtB;;AACAC,yBAAOC,IAAP,CAAa,uBAAsBJ,aAAc,EAAjD;;AACA,QAAMK,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWP,aAAX,CAAtB;AACA,QAAMQ,WAAW,GAAGF,IAAI,CAACG,SAAL,CAAeJ,aAAa,CAACK,gBAA7B,CAApB,CAJ0C,CAK1C;;AACA,QAAMC,aAAa,GAAGN,aAAa,CAACO,mBAApC;AACA,QAAM,wBAAmBJ,WAAnB,EAAgCF,IAAI,CAACG,SAAL,CAAeE,aAAf,CAAhC,CAAN;AACD,C,CACD;;;AACO,eAAeE,mCAAf,CAAmDf,KAAnD,EAA0D;AAC/D,MAAI;AACF,UAAMgB,aAAa,GAAG,mCACpBC,oBAAeC,YADK,CAAtB;;AAGA,QAAIF,aAAJ,EAAmB;AACjB,YAAM,6CACJA,aADI,EAEJhB,KAFI,EAGJD,YAHI,CAAN;AAKA,YAAMiB,aAAa,CAACG,OAAd,EAAN;AACD,KAPD,MAOO;AACL;;AACA;AACA,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;AACF,GAhBD,CAgBE,OAAOC,KAAP,EAAc;AACdhB,2BAAOgB,KAAP,CAAc,wCAAuCA,KAAK,CAACC,OAAQ,GAAnE;AACD;AACF","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n//  SPDX-License-Identifier: MIT-0\n\nimport { publish as publishToMosquitto } from \"./mosquitto\";\nimport {\n  createConnectionConfigs as createConnectionToIotCore,\n  createSubscribeOnConnectAndResume as createSubscriptionToIoTCoreTopic,\n} from \"../services/iotv2\";\nimport { mqttBrokerInfo } from \"../env\";\nimport logger from \"../utils/winstonLogger\";\n\nconst decoder = new TextDecoder(\"utf8\");\n\n// TO-DO Valdiate the mock callback\n/* istanbul ignore next */\nasync function sendToDeneva(topic, payload) {\n  const decodePayload = decoder.decode(payload).replace(/\\r?\\n|\\r/g, \"\");\n  logger.info(`Payload from Cloud: ${decodePayload}`);\n  const payloadObject = JSON.parse(decodePayload);\n  const targetTopic = JSON.stringify(payloadObject.destinationTopic);\n  //   const campaignsList = JSON.stringify(payloadObject.campaignsSortedList);\n  const campaignsList = payloadObject.campaignsSortedList;\n  await publishToMosquitto(targetTopic, JSON.stringify(campaignsList));\n}\n// eslint-disable-next-line import/prefer-default-export\nexport async function createSubscriptionAndConnectToTopic(topic) {\n  try {\n    const iotConnection = createConnectionToIotCore(\n      mqttBrokerInfo.mqttClientId\n    );\n    if (iotConnection) {\n      await createSubscriptionToIoTCoreTopic(\n        iotConnection,\n        topic,\n        sendToDeneva\n      );\n      await iotConnection.connect();\n    } else {\n      // Resilience in error threating\n      /* istanbul ignore next */\n      throw new Error(\"No IoT Connection Created. Retrying...\");\n    }\n  } catch (error) {\n    logger.error(`Unable to subscribe to Topic. Error: ${error.message}.`);\n  }\n}\n"],"file":"listenToTopic.js"}